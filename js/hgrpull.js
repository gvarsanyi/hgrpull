#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
(function() {
  var count, done, done_count, fs, hg_pull_update, home, is_dir, logs, parse_url, passwords, window;

  fs = require('fs');

  is_dir = require('./lib/is_dir');

  parse_url = require('./lib/parse_url');

  hg_pull_update = require('./lib/hg_pull_update');

  window = new (require('./lib/Window'));

  passwords = new (require('./lib/Passwords'))(window);

  home = process.cwd();

  fs.readdir('.', function(err, dirs) {
    var dir, id, item, list, maxlen, update, _i, _j, _len, _len1, _results;
    if (err) {
      throw new Error(err);
    }
    update = function(dir, id) {
      var status;
      status = function(msg) {
        return window.out(msg, 1, id + 1, 1);
      };
      process.chdir(home + '/' + dir);
      window.out(dir, 4, id + 1);
      process.cwd(home + '/' + dir);
      status('.');
      return fs.readFile('.hg/hgrc', {
        encoding: 'utf-8'
      }, function(err, hgrc) {
        var finish, host, line, lines, password, paths, protocol, user, _i, _len, _ref;
        finish = function(err, stdout) {
          if (err) {
            status('\u2716');
            return done(stdout, err, protocol, user, password, host);
          } else {
            if (stdout.indexOf('no changes found') === -1) {
              status('\u2714');
              return done(stdout, null, dir, protocol, user, password, host);
            } else {
              status('\u2713');
              return done(null, null, dir, protocol, user, password, host);
            }
          }
        };
        if (err) {
          return status('\u2716');
        } else {
          lines = hgrc.split('\n');
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            line = lines[_i];
            if (line[0] === '[') {
              paths = false;
            }
            if (line === '[paths]') {
              paths = true;
            }
            if (line.substr(0, 10) === 'default = ') {
              _ref = parse_url(line.substr(10)), protocol = _ref.protocol, user = _ref.user, password = _ref.password, host = _ref.host;
              break;
            }
          }
          if ((protocol === 'http' || protocol === 'https') && user && !password) {
            status('?');
            return passwords.get(user, protocol, host, function(err, password) {
              if (err) {
                return status('\u2716');
              }
              status('#');
              return hg_pull_update(protocol, user, password, host, finish);
            });
          } else {
            status('#');
            return hg_pull_update(protocol, user, password, host, finish);
          }
        }
      });
    };
    list = [];
    maxlen = 0;
    for (_i = 0, _len = dirs.length; _i < _len; _i++) {
      dir = dirs[_i];
      if (is_dir(home + '/' + dir)) {
        id = list.length;
        count += 1;
        list.push(dir);
        if (maxlen < dir.length) {
          maxlen = dir.length;
        }
      }
    }
    window.init(list.length + 4);
    window.out('Running `hg pull -u` for all subdirectories with .hg', 0, 0);
    _results = [];
    for (id = _j = 0, _len1 = list.length; _j < _len1; id = ++_j) {
      item = list[id];
      _results.push(update(item, id));
    }
    return _results;
  });

  logs = [];

  count = 0;

  done_count = 0;

  done = function(stdout, err, dir, protocol, user, password, host) {
    var log, _i, _len, _results;
    done_count += 1;
    if (err || stdout) {
      logs.push(' ');
      logs.push('[' + dir + ' ' + protocol + '://' + user + '@' + host + ']');
      if (stdout) {
        logs.push('STDOUT:', stdout);
      }
      if (err) {
        logs.push('ERROR:', err);
      }
      logs.push('--------------------------------------------------------');
    }
    if (done_count === count) {
      _results = [];
      for (_i = 0, _len = logs.length; _i < _len; _i++) {
        log = logs[_i];
        _results.push(console.log(log));
      }
      return _results;
    }
  };

}).call(this);
