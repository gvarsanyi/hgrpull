// Generated by CoffeeScript 1.6.3
(function() {
  var Passwords;

  Passwords = (function() {
    function Passwords(window) {
      this.window = window;
      this.users = {};
      this.queue = [];
      this.retrieving = false;
    }

    Passwords.prototype.retrieve = function() {
      var host, id, msg, protocol, user, _ref,
        _this = this;
      if (!this.retrieving) {
        this.retrieving = true;
        id = this.queue.shift();
        _ref = this.users[id], user = _ref.user, protocol = _ref.protocol, host = _ref.host;
        msg = 'Password for ' + user + '@' + host + ' over ' + protocol + ': ';
        this.window.clear_last_row();
        return this.window.get_password(msg, function(err, password) {
          var callback, _i, _len, _ref1;
          if (err) {
            throw new Error(err);
          }
          _this.window.clear_last_row();
          _this.users[id].password = password || '';
          _ref1 = _this.users[id].callbacks;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            callback = _ref1[_i];
            callback(null, password || '');
          }
          _this.retrieving = false;
          if (_this.queue.length) {
            return _this.retrieve();
          }
        });
      }
    };

    Passwords.prototype.get = function(user, protocol, host, callback) {
      var id, _ref;
      id = [user, protocol, host].join('*');
      if (((_ref = this.users[id]) != null ? _ref.password : void 0) != null) {
        return callback(null, this.users[id].password);
      }
      if (this.users[id] === void 0) {
        this.users[id] = {
          user: user,
          protocol: protocol,
          host: host,
          callbacks: [callback]
        };
        this.queue.push(id);
        return this.retrieve();
      } else {
        return this.users[id].callbacks.push(callback);
      }
    };

    return Passwords;

  })();

  module.exports = Passwords;

}).call(this);
